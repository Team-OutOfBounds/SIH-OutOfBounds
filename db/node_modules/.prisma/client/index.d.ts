
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model global_index
 * 
 */
export type global_index = $Result.DefaultSelection<Prisma.$global_indexPayload>
/**
 * Model summary
 * 
 */
export type summary = $Result.DefaultSelection<Prisma.$summaryPayload>
/**
 * Model ner
 * 
 */
export type ner = $Result.DefaultSelection<Prisma.$nerPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Global_indices
 * const global_indices = await prisma.global_index.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Global_indices
   * const global_indices = await prisma.global_index.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.global_index`: Exposes CRUD operations for the **global_index** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Global_indices
    * const global_indices = await prisma.global_index.findMany()
    * ```
    */
  get global_index(): Prisma.global_indexDelegate<ExtArgs>;

  /**
   * `prisma.summary`: Exposes CRUD operations for the **summary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Summaries
    * const summaries = await prisma.summary.findMany()
    * ```
    */
  get summary(): Prisma.summaryDelegate<ExtArgs>;

  /**
   * `prisma.ner`: Exposes CRUD operations for the **ner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ners
    * const ners = await prisma.ner.findMany()
    * ```
    */
  get ner(): Prisma.nerDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.0.0
   * Query Engine version: 5dbef10bdbfb579e07d35cc85fb1518d357cb99e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    global_index: 'global_index',
    summary: 'summary',
    ner: 'ner'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "global_index" | "summary" | "ner"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      global_index: {
        payload: Prisma.$global_indexPayload<ExtArgs>
        fields: Prisma.global_indexFieldRefs
        operations: {
          findUnique: {
            args: Prisma.global_indexFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$global_indexPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.global_indexFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$global_indexPayload>
          }
          findFirst: {
            args: Prisma.global_indexFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$global_indexPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.global_indexFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$global_indexPayload>
          }
          findMany: {
            args: Prisma.global_indexFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$global_indexPayload>[]
          }
          create: {
            args: Prisma.global_indexCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$global_indexPayload>
          }
          createMany: {
            args: Prisma.global_indexCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.global_indexCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$global_indexPayload>[]
          }
          delete: {
            args: Prisma.global_indexDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$global_indexPayload>
          }
          update: {
            args: Prisma.global_indexUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$global_indexPayload>
          }
          deleteMany: {
            args: Prisma.global_indexDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.global_indexUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.global_indexUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$global_indexPayload>
          }
          aggregate: {
            args: Prisma.Global_indexAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGlobal_index>
          }
          groupBy: {
            args: Prisma.global_indexGroupByArgs<ExtArgs>
            result: $Utils.Optional<Global_indexGroupByOutputType>[]
          }
          count: {
            args: Prisma.global_indexCountArgs<ExtArgs>
            result: $Utils.Optional<Global_indexCountAggregateOutputType> | number
          }
        }
      }
      summary: {
        payload: Prisma.$summaryPayload<ExtArgs>
        fields: Prisma.summaryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.summaryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$summaryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.summaryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$summaryPayload>
          }
          findFirst: {
            args: Prisma.summaryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$summaryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.summaryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$summaryPayload>
          }
          findMany: {
            args: Prisma.summaryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$summaryPayload>[]
          }
          create: {
            args: Prisma.summaryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$summaryPayload>
          }
          createMany: {
            args: Prisma.summaryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.summaryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$summaryPayload>[]
          }
          delete: {
            args: Prisma.summaryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$summaryPayload>
          }
          update: {
            args: Prisma.summaryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$summaryPayload>
          }
          deleteMany: {
            args: Prisma.summaryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.summaryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.summaryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$summaryPayload>
          }
          aggregate: {
            args: Prisma.SummaryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSummary>
          }
          groupBy: {
            args: Prisma.summaryGroupByArgs<ExtArgs>
            result: $Utils.Optional<SummaryGroupByOutputType>[]
          }
          count: {
            args: Prisma.summaryCountArgs<ExtArgs>
            result: $Utils.Optional<SummaryCountAggregateOutputType> | number
          }
        }
      }
      ner: {
        payload: Prisma.$nerPayload<ExtArgs>
        fields: Prisma.nerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.nerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.nerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nerPayload>
          }
          findFirst: {
            args: Prisma.nerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.nerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nerPayload>
          }
          findMany: {
            args: Prisma.nerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nerPayload>[]
          }
          create: {
            args: Prisma.nerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nerPayload>
          }
          createMany: {
            args: Prisma.nerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.nerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nerPayload>[]
          }
          delete: {
            args: Prisma.nerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nerPayload>
          }
          update: {
            args: Prisma.nerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nerPayload>
          }
          deleteMany: {
            args: Prisma.nerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.nerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.nerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$nerPayload>
          }
          aggregate: {
            args: Prisma.NerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNer>
          }
          groupBy: {
            args: Prisma.nerGroupByArgs<ExtArgs>
            result: $Utils.Optional<NerGroupByOutputType>[]
          }
          count: {
            args: Prisma.nerCountArgs<ExtArgs>
            result: $Utils.Optional<NerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model global_index
   */

  export type AggregateGlobal_index = {
    _count: Global_indexCountAggregateOutputType | null
    _min: Global_indexMinAggregateOutputType | null
    _max: Global_indexMaxAggregateOutputType | null
  }

  export type Global_indexMinAggregateOutputType = {
    uuid: string | null
    filename: string | null
  }

  export type Global_indexMaxAggregateOutputType = {
    uuid: string | null
    filename: string | null
  }

  export type Global_indexCountAggregateOutputType = {
    uuid: number
    filename: number
    _all: number
  }


  export type Global_indexMinAggregateInputType = {
    uuid?: true
    filename?: true
  }

  export type Global_indexMaxAggregateInputType = {
    uuid?: true
    filename?: true
  }

  export type Global_indexCountAggregateInputType = {
    uuid?: true
    filename?: true
    _all?: true
  }

  export type Global_indexAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which global_index to aggregate.
     */
    where?: global_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of global_indices to fetch.
     */
    orderBy?: global_indexOrderByWithRelationInput | global_indexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: global_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` global_indices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` global_indices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned global_indices
    **/
    _count?: true | Global_indexCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Global_indexMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Global_indexMaxAggregateInputType
  }

  export type GetGlobal_indexAggregateType<T extends Global_indexAggregateArgs> = {
        [P in keyof T & keyof AggregateGlobal_index]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGlobal_index[P]>
      : GetScalarType<T[P], AggregateGlobal_index[P]>
  }




  export type global_indexGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: global_indexWhereInput
    orderBy?: global_indexOrderByWithAggregationInput | global_indexOrderByWithAggregationInput[]
    by: Global_indexScalarFieldEnum[] | Global_indexScalarFieldEnum
    having?: global_indexScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Global_indexCountAggregateInputType | true
    _min?: Global_indexMinAggregateInputType
    _max?: Global_indexMaxAggregateInputType
  }

  export type Global_indexGroupByOutputType = {
    uuid: string
    filename: string
    _count: Global_indexCountAggregateOutputType | null
    _min: Global_indexMinAggregateOutputType | null
    _max: Global_indexMaxAggregateOutputType | null
  }

  type GetGlobal_indexGroupByPayload<T extends global_indexGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Global_indexGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Global_indexGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Global_indexGroupByOutputType[P]>
            : GetScalarType<T[P], Global_indexGroupByOutputType[P]>
        }
      >
    >


  export type global_indexSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uuid?: boolean
    filename?: boolean
    summary?: boolean | global_index$summaryArgs<ExtArgs>
    ner?: boolean | global_index$nerArgs<ExtArgs>
  }, ExtArgs["result"]["global_index"]>

  export type global_indexSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uuid?: boolean
    filename?: boolean
  }, ExtArgs["result"]["global_index"]>

  export type global_indexSelectScalar = {
    uuid?: boolean
    filename?: boolean
  }

  export type global_indexInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    summary?: boolean | global_index$summaryArgs<ExtArgs>
    ner?: boolean | global_index$nerArgs<ExtArgs>
  }
  export type global_indexIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $global_indexPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "global_index"
    objects: {
      summary: Prisma.$summaryPayload<ExtArgs> | null
      ner: Prisma.$nerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      uuid: string
      filename: string
    }, ExtArgs["result"]["global_index"]>
    composites: {}
  }

  type global_indexGetPayload<S extends boolean | null | undefined | global_indexDefaultArgs> = $Result.GetResult<Prisma.$global_indexPayload, S>

  type global_indexCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<global_indexFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Global_indexCountAggregateInputType | true
    }

  export interface global_indexDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['global_index'], meta: { name: 'global_index' } }
    /**
     * Find zero or one Global_index that matches the filter.
     * @param {global_indexFindUniqueArgs} args - Arguments to find a Global_index
     * @example
     * // Get one Global_index
     * const global_index = await prisma.global_index.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends global_indexFindUniqueArgs>(args: SelectSubset<T, global_indexFindUniqueArgs<ExtArgs>>): Prisma__global_indexClient<$Result.GetResult<Prisma.$global_indexPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Global_index that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {global_indexFindUniqueOrThrowArgs} args - Arguments to find a Global_index
     * @example
     * // Get one Global_index
     * const global_index = await prisma.global_index.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends global_indexFindUniqueOrThrowArgs>(args: SelectSubset<T, global_indexFindUniqueOrThrowArgs<ExtArgs>>): Prisma__global_indexClient<$Result.GetResult<Prisma.$global_indexPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Global_index that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {global_indexFindFirstArgs} args - Arguments to find a Global_index
     * @example
     * // Get one Global_index
     * const global_index = await prisma.global_index.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends global_indexFindFirstArgs>(args?: SelectSubset<T, global_indexFindFirstArgs<ExtArgs>>): Prisma__global_indexClient<$Result.GetResult<Prisma.$global_indexPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Global_index that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {global_indexFindFirstOrThrowArgs} args - Arguments to find a Global_index
     * @example
     * // Get one Global_index
     * const global_index = await prisma.global_index.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends global_indexFindFirstOrThrowArgs>(args?: SelectSubset<T, global_indexFindFirstOrThrowArgs<ExtArgs>>): Prisma__global_indexClient<$Result.GetResult<Prisma.$global_indexPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Global_indices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {global_indexFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Global_indices
     * const global_indices = await prisma.global_index.findMany()
     * 
     * // Get first 10 Global_indices
     * const global_indices = await prisma.global_index.findMany({ take: 10 })
     * 
     * // Only select the `uuid`
     * const global_indexWithUuidOnly = await prisma.global_index.findMany({ select: { uuid: true } })
     * 
     */
    findMany<T extends global_indexFindManyArgs>(args?: SelectSubset<T, global_indexFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$global_indexPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Global_index.
     * @param {global_indexCreateArgs} args - Arguments to create a Global_index.
     * @example
     * // Create one Global_index
     * const Global_index = await prisma.global_index.create({
     *   data: {
     *     // ... data to create a Global_index
     *   }
     * })
     * 
     */
    create<T extends global_indexCreateArgs>(args: SelectSubset<T, global_indexCreateArgs<ExtArgs>>): Prisma__global_indexClient<$Result.GetResult<Prisma.$global_indexPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Global_indices.
     * @param {global_indexCreateManyArgs} args - Arguments to create many Global_indices.
     * @example
     * // Create many Global_indices
     * const global_index = await prisma.global_index.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends global_indexCreateManyArgs>(args?: SelectSubset<T, global_indexCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Global_indices and returns the data saved in the database.
     * @param {global_indexCreateManyAndReturnArgs} args - Arguments to create many Global_indices.
     * @example
     * // Create many Global_indices
     * const global_index = await prisma.global_index.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Global_indices and only return the `uuid`
     * const global_indexWithUuidOnly = await prisma.global_index.createManyAndReturn({ 
     *   select: { uuid: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends global_indexCreateManyAndReturnArgs>(args?: SelectSubset<T, global_indexCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$global_indexPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Global_index.
     * @param {global_indexDeleteArgs} args - Arguments to delete one Global_index.
     * @example
     * // Delete one Global_index
     * const Global_index = await prisma.global_index.delete({
     *   where: {
     *     // ... filter to delete one Global_index
     *   }
     * })
     * 
     */
    delete<T extends global_indexDeleteArgs>(args: SelectSubset<T, global_indexDeleteArgs<ExtArgs>>): Prisma__global_indexClient<$Result.GetResult<Prisma.$global_indexPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Global_index.
     * @param {global_indexUpdateArgs} args - Arguments to update one Global_index.
     * @example
     * // Update one Global_index
     * const global_index = await prisma.global_index.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends global_indexUpdateArgs>(args: SelectSubset<T, global_indexUpdateArgs<ExtArgs>>): Prisma__global_indexClient<$Result.GetResult<Prisma.$global_indexPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Global_indices.
     * @param {global_indexDeleteManyArgs} args - Arguments to filter Global_indices to delete.
     * @example
     * // Delete a few Global_indices
     * const { count } = await prisma.global_index.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends global_indexDeleteManyArgs>(args?: SelectSubset<T, global_indexDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Global_indices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {global_indexUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Global_indices
     * const global_index = await prisma.global_index.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends global_indexUpdateManyArgs>(args: SelectSubset<T, global_indexUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Global_index.
     * @param {global_indexUpsertArgs} args - Arguments to update or create a Global_index.
     * @example
     * // Update or create a Global_index
     * const global_index = await prisma.global_index.upsert({
     *   create: {
     *     // ... data to create a Global_index
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Global_index we want to update
     *   }
     * })
     */
    upsert<T extends global_indexUpsertArgs>(args: SelectSubset<T, global_indexUpsertArgs<ExtArgs>>): Prisma__global_indexClient<$Result.GetResult<Prisma.$global_indexPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Global_indices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {global_indexCountArgs} args - Arguments to filter Global_indices to count.
     * @example
     * // Count the number of Global_indices
     * const count = await prisma.global_index.count({
     *   where: {
     *     // ... the filter for the Global_indices we want to count
     *   }
     * })
    **/
    count<T extends global_indexCountArgs>(
      args?: Subset<T, global_indexCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Global_indexCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Global_index.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Global_indexAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Global_indexAggregateArgs>(args: Subset<T, Global_indexAggregateArgs>): Prisma.PrismaPromise<GetGlobal_indexAggregateType<T>>

    /**
     * Group by Global_index.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {global_indexGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends global_indexGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: global_indexGroupByArgs['orderBy'] }
        : { orderBy?: global_indexGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, global_indexGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGlobal_indexGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the global_index model
   */
  readonly fields: global_indexFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for global_index.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__global_indexClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    summary<T extends global_index$summaryArgs<ExtArgs> = {}>(args?: Subset<T, global_index$summaryArgs<ExtArgs>>): Prisma__summaryClient<$Result.GetResult<Prisma.$summaryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    ner<T extends global_index$nerArgs<ExtArgs> = {}>(args?: Subset<T, global_index$nerArgs<ExtArgs>>): Prisma__nerClient<$Result.GetResult<Prisma.$nerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the global_index model
   */ 
  interface global_indexFieldRefs {
    readonly uuid: FieldRef<"global_index", 'String'>
    readonly filename: FieldRef<"global_index", 'String'>
  }
    

  // Custom InputTypes
  /**
   * global_index findUnique
   */
  export type global_indexFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the global_index
     */
    select?: global_indexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: global_indexInclude<ExtArgs> | null
    /**
     * Filter, which global_index to fetch.
     */
    where: global_indexWhereUniqueInput
  }

  /**
   * global_index findUniqueOrThrow
   */
  export type global_indexFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the global_index
     */
    select?: global_indexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: global_indexInclude<ExtArgs> | null
    /**
     * Filter, which global_index to fetch.
     */
    where: global_indexWhereUniqueInput
  }

  /**
   * global_index findFirst
   */
  export type global_indexFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the global_index
     */
    select?: global_indexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: global_indexInclude<ExtArgs> | null
    /**
     * Filter, which global_index to fetch.
     */
    where?: global_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of global_indices to fetch.
     */
    orderBy?: global_indexOrderByWithRelationInput | global_indexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for global_indices.
     */
    cursor?: global_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` global_indices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` global_indices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of global_indices.
     */
    distinct?: Global_indexScalarFieldEnum | Global_indexScalarFieldEnum[]
  }

  /**
   * global_index findFirstOrThrow
   */
  export type global_indexFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the global_index
     */
    select?: global_indexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: global_indexInclude<ExtArgs> | null
    /**
     * Filter, which global_index to fetch.
     */
    where?: global_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of global_indices to fetch.
     */
    orderBy?: global_indexOrderByWithRelationInput | global_indexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for global_indices.
     */
    cursor?: global_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` global_indices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` global_indices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of global_indices.
     */
    distinct?: Global_indexScalarFieldEnum | Global_indexScalarFieldEnum[]
  }

  /**
   * global_index findMany
   */
  export type global_indexFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the global_index
     */
    select?: global_indexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: global_indexInclude<ExtArgs> | null
    /**
     * Filter, which global_indices to fetch.
     */
    where?: global_indexWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of global_indices to fetch.
     */
    orderBy?: global_indexOrderByWithRelationInput | global_indexOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing global_indices.
     */
    cursor?: global_indexWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` global_indices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` global_indices.
     */
    skip?: number
    distinct?: Global_indexScalarFieldEnum | Global_indexScalarFieldEnum[]
  }

  /**
   * global_index create
   */
  export type global_indexCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the global_index
     */
    select?: global_indexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: global_indexInclude<ExtArgs> | null
    /**
     * The data needed to create a global_index.
     */
    data: XOR<global_indexCreateInput, global_indexUncheckedCreateInput>
  }

  /**
   * global_index createMany
   */
  export type global_indexCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many global_indices.
     */
    data: global_indexCreateManyInput | global_indexCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * global_index createManyAndReturn
   */
  export type global_indexCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the global_index
     */
    select?: global_indexSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many global_indices.
     */
    data: global_indexCreateManyInput | global_indexCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * global_index update
   */
  export type global_indexUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the global_index
     */
    select?: global_indexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: global_indexInclude<ExtArgs> | null
    /**
     * The data needed to update a global_index.
     */
    data: XOR<global_indexUpdateInput, global_indexUncheckedUpdateInput>
    /**
     * Choose, which global_index to update.
     */
    where: global_indexWhereUniqueInput
  }

  /**
   * global_index updateMany
   */
  export type global_indexUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update global_indices.
     */
    data: XOR<global_indexUpdateManyMutationInput, global_indexUncheckedUpdateManyInput>
    /**
     * Filter which global_indices to update
     */
    where?: global_indexWhereInput
  }

  /**
   * global_index upsert
   */
  export type global_indexUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the global_index
     */
    select?: global_indexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: global_indexInclude<ExtArgs> | null
    /**
     * The filter to search for the global_index to update in case it exists.
     */
    where: global_indexWhereUniqueInput
    /**
     * In case the global_index found by the `where` argument doesn't exist, create a new global_index with this data.
     */
    create: XOR<global_indexCreateInput, global_indexUncheckedCreateInput>
    /**
     * In case the global_index was found with the provided `where` argument, update it with this data.
     */
    update: XOR<global_indexUpdateInput, global_indexUncheckedUpdateInput>
  }

  /**
   * global_index delete
   */
  export type global_indexDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the global_index
     */
    select?: global_indexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: global_indexInclude<ExtArgs> | null
    /**
     * Filter which global_index to delete.
     */
    where: global_indexWhereUniqueInput
  }

  /**
   * global_index deleteMany
   */
  export type global_indexDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which global_indices to delete
     */
    where?: global_indexWhereInput
  }

  /**
   * global_index.summary
   */
  export type global_index$summaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the summary
     */
    select?: summarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: summaryInclude<ExtArgs> | null
    where?: summaryWhereInput
  }

  /**
   * global_index.ner
   */
  export type global_index$nerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ner
     */
    select?: nerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nerInclude<ExtArgs> | null
    where?: nerWhereInput
  }

  /**
   * global_index without action
   */
  export type global_indexDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the global_index
     */
    select?: global_indexSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: global_indexInclude<ExtArgs> | null
  }


  /**
   * Model summary
   */

  export type AggregateSummary = {
    _count: SummaryCountAggregateOutputType | null
    _avg: SummaryAvgAggregateOutputType | null
    _sum: SummarySumAggregateOutputType | null
    _min: SummaryMinAggregateOutputType | null
    _max: SummaryMaxAggregateOutputType | null
  }

  export type SummaryAvgAggregateOutputType = {
    id: number | null
  }

  export type SummarySumAggregateOutputType = {
    id: number | null
  }

  export type SummaryMinAggregateOutputType = {
    id: number | null
    summary: string | null
    global_index_uuid: string | null
  }

  export type SummaryMaxAggregateOutputType = {
    id: number | null
    summary: string | null
    global_index_uuid: string | null
  }

  export type SummaryCountAggregateOutputType = {
    id: number
    summary: number
    global_index_uuid: number
    _all: number
  }


  export type SummaryAvgAggregateInputType = {
    id?: true
  }

  export type SummarySumAggregateInputType = {
    id?: true
  }

  export type SummaryMinAggregateInputType = {
    id?: true
    summary?: true
    global_index_uuid?: true
  }

  export type SummaryMaxAggregateInputType = {
    id?: true
    summary?: true
    global_index_uuid?: true
  }

  export type SummaryCountAggregateInputType = {
    id?: true
    summary?: true
    global_index_uuid?: true
    _all?: true
  }

  export type SummaryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which summary to aggregate.
     */
    where?: summaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of summaries to fetch.
     */
    orderBy?: summaryOrderByWithRelationInput | summaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: summaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` summaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` summaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned summaries
    **/
    _count?: true | SummaryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SummaryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SummarySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SummaryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SummaryMaxAggregateInputType
  }

  export type GetSummaryAggregateType<T extends SummaryAggregateArgs> = {
        [P in keyof T & keyof AggregateSummary]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSummary[P]>
      : GetScalarType<T[P], AggregateSummary[P]>
  }




  export type summaryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: summaryWhereInput
    orderBy?: summaryOrderByWithAggregationInput | summaryOrderByWithAggregationInput[]
    by: SummaryScalarFieldEnum[] | SummaryScalarFieldEnum
    having?: summaryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SummaryCountAggregateInputType | true
    _avg?: SummaryAvgAggregateInputType
    _sum?: SummarySumAggregateInputType
    _min?: SummaryMinAggregateInputType
    _max?: SummaryMaxAggregateInputType
  }

  export type SummaryGroupByOutputType = {
    id: number
    summary: string
    global_index_uuid: string
    _count: SummaryCountAggregateOutputType | null
    _avg: SummaryAvgAggregateOutputType | null
    _sum: SummarySumAggregateOutputType | null
    _min: SummaryMinAggregateOutputType | null
    _max: SummaryMaxAggregateOutputType | null
  }

  type GetSummaryGroupByPayload<T extends summaryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SummaryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SummaryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SummaryGroupByOutputType[P]>
            : GetScalarType<T[P], SummaryGroupByOutputType[P]>
        }
      >
    >


  export type summarySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    summary?: boolean
    global_index_uuid?: boolean
    global_index?: boolean | global_indexDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["summary"]>

  export type summarySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    summary?: boolean
    global_index_uuid?: boolean
    global_index?: boolean | global_indexDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["summary"]>

  export type summarySelectScalar = {
    id?: boolean
    summary?: boolean
    global_index_uuid?: boolean
  }

  export type summaryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    global_index?: boolean | global_indexDefaultArgs<ExtArgs>
  }
  export type summaryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    global_index?: boolean | global_indexDefaultArgs<ExtArgs>
  }

  export type $summaryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "summary"
    objects: {
      global_index: Prisma.$global_indexPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      summary: string
      global_index_uuid: string
    }, ExtArgs["result"]["summary"]>
    composites: {}
  }

  type summaryGetPayload<S extends boolean | null | undefined | summaryDefaultArgs> = $Result.GetResult<Prisma.$summaryPayload, S>

  type summaryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<summaryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SummaryCountAggregateInputType | true
    }

  export interface summaryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['summary'], meta: { name: 'summary' } }
    /**
     * Find zero or one Summary that matches the filter.
     * @param {summaryFindUniqueArgs} args - Arguments to find a Summary
     * @example
     * // Get one Summary
     * const summary = await prisma.summary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends summaryFindUniqueArgs>(args: SelectSubset<T, summaryFindUniqueArgs<ExtArgs>>): Prisma__summaryClient<$Result.GetResult<Prisma.$summaryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Summary that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {summaryFindUniqueOrThrowArgs} args - Arguments to find a Summary
     * @example
     * // Get one Summary
     * const summary = await prisma.summary.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends summaryFindUniqueOrThrowArgs>(args: SelectSubset<T, summaryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__summaryClient<$Result.GetResult<Prisma.$summaryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Summary that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {summaryFindFirstArgs} args - Arguments to find a Summary
     * @example
     * // Get one Summary
     * const summary = await prisma.summary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends summaryFindFirstArgs>(args?: SelectSubset<T, summaryFindFirstArgs<ExtArgs>>): Prisma__summaryClient<$Result.GetResult<Prisma.$summaryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Summary that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {summaryFindFirstOrThrowArgs} args - Arguments to find a Summary
     * @example
     * // Get one Summary
     * const summary = await prisma.summary.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends summaryFindFirstOrThrowArgs>(args?: SelectSubset<T, summaryFindFirstOrThrowArgs<ExtArgs>>): Prisma__summaryClient<$Result.GetResult<Prisma.$summaryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Summaries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {summaryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Summaries
     * const summaries = await prisma.summary.findMany()
     * 
     * // Get first 10 Summaries
     * const summaries = await prisma.summary.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const summaryWithIdOnly = await prisma.summary.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends summaryFindManyArgs>(args?: SelectSubset<T, summaryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$summaryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Summary.
     * @param {summaryCreateArgs} args - Arguments to create a Summary.
     * @example
     * // Create one Summary
     * const Summary = await prisma.summary.create({
     *   data: {
     *     // ... data to create a Summary
     *   }
     * })
     * 
     */
    create<T extends summaryCreateArgs>(args: SelectSubset<T, summaryCreateArgs<ExtArgs>>): Prisma__summaryClient<$Result.GetResult<Prisma.$summaryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Summaries.
     * @param {summaryCreateManyArgs} args - Arguments to create many Summaries.
     * @example
     * // Create many Summaries
     * const summary = await prisma.summary.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends summaryCreateManyArgs>(args?: SelectSubset<T, summaryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Summaries and returns the data saved in the database.
     * @param {summaryCreateManyAndReturnArgs} args - Arguments to create many Summaries.
     * @example
     * // Create many Summaries
     * const summary = await prisma.summary.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Summaries and only return the `id`
     * const summaryWithIdOnly = await prisma.summary.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends summaryCreateManyAndReturnArgs>(args?: SelectSubset<T, summaryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$summaryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Summary.
     * @param {summaryDeleteArgs} args - Arguments to delete one Summary.
     * @example
     * // Delete one Summary
     * const Summary = await prisma.summary.delete({
     *   where: {
     *     // ... filter to delete one Summary
     *   }
     * })
     * 
     */
    delete<T extends summaryDeleteArgs>(args: SelectSubset<T, summaryDeleteArgs<ExtArgs>>): Prisma__summaryClient<$Result.GetResult<Prisma.$summaryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Summary.
     * @param {summaryUpdateArgs} args - Arguments to update one Summary.
     * @example
     * // Update one Summary
     * const summary = await prisma.summary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends summaryUpdateArgs>(args: SelectSubset<T, summaryUpdateArgs<ExtArgs>>): Prisma__summaryClient<$Result.GetResult<Prisma.$summaryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Summaries.
     * @param {summaryDeleteManyArgs} args - Arguments to filter Summaries to delete.
     * @example
     * // Delete a few Summaries
     * const { count } = await prisma.summary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends summaryDeleteManyArgs>(args?: SelectSubset<T, summaryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Summaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {summaryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Summaries
     * const summary = await prisma.summary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends summaryUpdateManyArgs>(args: SelectSubset<T, summaryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Summary.
     * @param {summaryUpsertArgs} args - Arguments to update or create a Summary.
     * @example
     * // Update or create a Summary
     * const summary = await prisma.summary.upsert({
     *   create: {
     *     // ... data to create a Summary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Summary we want to update
     *   }
     * })
     */
    upsert<T extends summaryUpsertArgs>(args: SelectSubset<T, summaryUpsertArgs<ExtArgs>>): Prisma__summaryClient<$Result.GetResult<Prisma.$summaryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Summaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {summaryCountArgs} args - Arguments to filter Summaries to count.
     * @example
     * // Count the number of Summaries
     * const count = await prisma.summary.count({
     *   where: {
     *     // ... the filter for the Summaries we want to count
     *   }
     * })
    **/
    count<T extends summaryCountArgs>(
      args?: Subset<T, summaryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SummaryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Summary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SummaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SummaryAggregateArgs>(args: Subset<T, SummaryAggregateArgs>): Prisma.PrismaPromise<GetSummaryAggregateType<T>>

    /**
     * Group by Summary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {summaryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends summaryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: summaryGroupByArgs['orderBy'] }
        : { orderBy?: summaryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, summaryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSummaryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the summary model
   */
  readonly fields: summaryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for summary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__summaryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    global_index<T extends global_indexDefaultArgs<ExtArgs> = {}>(args?: Subset<T, global_indexDefaultArgs<ExtArgs>>): Prisma__global_indexClient<$Result.GetResult<Prisma.$global_indexPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the summary model
   */ 
  interface summaryFieldRefs {
    readonly id: FieldRef<"summary", 'Int'>
    readonly summary: FieldRef<"summary", 'String'>
    readonly global_index_uuid: FieldRef<"summary", 'String'>
  }
    

  // Custom InputTypes
  /**
   * summary findUnique
   */
  export type summaryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the summary
     */
    select?: summarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: summaryInclude<ExtArgs> | null
    /**
     * Filter, which summary to fetch.
     */
    where: summaryWhereUniqueInput
  }

  /**
   * summary findUniqueOrThrow
   */
  export type summaryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the summary
     */
    select?: summarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: summaryInclude<ExtArgs> | null
    /**
     * Filter, which summary to fetch.
     */
    where: summaryWhereUniqueInput
  }

  /**
   * summary findFirst
   */
  export type summaryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the summary
     */
    select?: summarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: summaryInclude<ExtArgs> | null
    /**
     * Filter, which summary to fetch.
     */
    where?: summaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of summaries to fetch.
     */
    orderBy?: summaryOrderByWithRelationInput | summaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for summaries.
     */
    cursor?: summaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` summaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` summaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of summaries.
     */
    distinct?: SummaryScalarFieldEnum | SummaryScalarFieldEnum[]
  }

  /**
   * summary findFirstOrThrow
   */
  export type summaryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the summary
     */
    select?: summarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: summaryInclude<ExtArgs> | null
    /**
     * Filter, which summary to fetch.
     */
    where?: summaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of summaries to fetch.
     */
    orderBy?: summaryOrderByWithRelationInput | summaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for summaries.
     */
    cursor?: summaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` summaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` summaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of summaries.
     */
    distinct?: SummaryScalarFieldEnum | SummaryScalarFieldEnum[]
  }

  /**
   * summary findMany
   */
  export type summaryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the summary
     */
    select?: summarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: summaryInclude<ExtArgs> | null
    /**
     * Filter, which summaries to fetch.
     */
    where?: summaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of summaries to fetch.
     */
    orderBy?: summaryOrderByWithRelationInput | summaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing summaries.
     */
    cursor?: summaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` summaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` summaries.
     */
    skip?: number
    distinct?: SummaryScalarFieldEnum | SummaryScalarFieldEnum[]
  }

  /**
   * summary create
   */
  export type summaryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the summary
     */
    select?: summarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: summaryInclude<ExtArgs> | null
    /**
     * The data needed to create a summary.
     */
    data: XOR<summaryCreateInput, summaryUncheckedCreateInput>
  }

  /**
   * summary createMany
   */
  export type summaryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many summaries.
     */
    data: summaryCreateManyInput | summaryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * summary createManyAndReturn
   */
  export type summaryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the summary
     */
    select?: summarySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many summaries.
     */
    data: summaryCreateManyInput | summaryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: summaryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * summary update
   */
  export type summaryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the summary
     */
    select?: summarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: summaryInclude<ExtArgs> | null
    /**
     * The data needed to update a summary.
     */
    data: XOR<summaryUpdateInput, summaryUncheckedUpdateInput>
    /**
     * Choose, which summary to update.
     */
    where: summaryWhereUniqueInput
  }

  /**
   * summary updateMany
   */
  export type summaryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update summaries.
     */
    data: XOR<summaryUpdateManyMutationInput, summaryUncheckedUpdateManyInput>
    /**
     * Filter which summaries to update
     */
    where?: summaryWhereInput
  }

  /**
   * summary upsert
   */
  export type summaryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the summary
     */
    select?: summarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: summaryInclude<ExtArgs> | null
    /**
     * The filter to search for the summary to update in case it exists.
     */
    where: summaryWhereUniqueInput
    /**
     * In case the summary found by the `where` argument doesn't exist, create a new summary with this data.
     */
    create: XOR<summaryCreateInput, summaryUncheckedCreateInput>
    /**
     * In case the summary was found with the provided `where` argument, update it with this data.
     */
    update: XOR<summaryUpdateInput, summaryUncheckedUpdateInput>
  }

  /**
   * summary delete
   */
  export type summaryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the summary
     */
    select?: summarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: summaryInclude<ExtArgs> | null
    /**
     * Filter which summary to delete.
     */
    where: summaryWhereUniqueInput
  }

  /**
   * summary deleteMany
   */
  export type summaryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which summaries to delete
     */
    where?: summaryWhereInput
  }

  /**
   * summary without action
   */
  export type summaryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the summary
     */
    select?: summarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: summaryInclude<ExtArgs> | null
  }


  /**
   * Model ner
   */

  export type AggregateNer = {
    _count: NerCountAggregateOutputType | null
    _min: NerMinAggregateOutputType | null
    _max: NerMaxAggregateOutputType | null
  }

  export type NerMinAggregateOutputType = {
    uuid: string | null
    file_name: string | null
    CASE_NUMBER: string | null
    COURT: string | null
    DATE: string | null
    GPE: string | null
    JUDGE: string | null
    LAWYER: string | null
    ORG: string | null
    OTHER_PERSON: string | null
    PETITIONER: string | null
    PRECEDENT: string | null
    PROVISION: string | null
    RESPONDENT: string | null
    STATUTE: string | null
    WITNESS: string | null
    global_index_uuid: string | null
  }

  export type NerMaxAggregateOutputType = {
    uuid: string | null
    file_name: string | null
    CASE_NUMBER: string | null
    COURT: string | null
    DATE: string | null
    GPE: string | null
    JUDGE: string | null
    LAWYER: string | null
    ORG: string | null
    OTHER_PERSON: string | null
    PETITIONER: string | null
    PRECEDENT: string | null
    PROVISION: string | null
    RESPONDENT: string | null
    STATUTE: string | null
    WITNESS: string | null
    global_index_uuid: string | null
  }

  export type NerCountAggregateOutputType = {
    uuid: number
    file_name: number
    CASE_NUMBER: number
    COURT: number
    DATE: number
    GPE: number
    JUDGE: number
    LAWYER: number
    ORG: number
    OTHER_PERSON: number
    PETITIONER: number
    PRECEDENT: number
    PROVISION: number
    RESPONDENT: number
    STATUTE: number
    WITNESS: number
    global_index_uuid: number
    _all: number
  }


  export type NerMinAggregateInputType = {
    uuid?: true
    file_name?: true
    CASE_NUMBER?: true
    COURT?: true
    DATE?: true
    GPE?: true
    JUDGE?: true
    LAWYER?: true
    ORG?: true
    OTHER_PERSON?: true
    PETITIONER?: true
    PRECEDENT?: true
    PROVISION?: true
    RESPONDENT?: true
    STATUTE?: true
    WITNESS?: true
    global_index_uuid?: true
  }

  export type NerMaxAggregateInputType = {
    uuid?: true
    file_name?: true
    CASE_NUMBER?: true
    COURT?: true
    DATE?: true
    GPE?: true
    JUDGE?: true
    LAWYER?: true
    ORG?: true
    OTHER_PERSON?: true
    PETITIONER?: true
    PRECEDENT?: true
    PROVISION?: true
    RESPONDENT?: true
    STATUTE?: true
    WITNESS?: true
    global_index_uuid?: true
  }

  export type NerCountAggregateInputType = {
    uuid?: true
    file_name?: true
    CASE_NUMBER?: true
    COURT?: true
    DATE?: true
    GPE?: true
    JUDGE?: true
    LAWYER?: true
    ORG?: true
    OTHER_PERSON?: true
    PETITIONER?: true
    PRECEDENT?: true
    PROVISION?: true
    RESPONDENT?: true
    STATUTE?: true
    WITNESS?: true
    global_index_uuid?: true
    _all?: true
  }

  export type NerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ner to aggregate.
     */
    where?: nerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ners to fetch.
     */
    orderBy?: nerOrderByWithRelationInput | nerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: nerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ners
    **/
    _count?: true | NerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NerMaxAggregateInputType
  }

  export type GetNerAggregateType<T extends NerAggregateArgs> = {
        [P in keyof T & keyof AggregateNer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNer[P]>
      : GetScalarType<T[P], AggregateNer[P]>
  }




  export type nerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: nerWhereInput
    orderBy?: nerOrderByWithAggregationInput | nerOrderByWithAggregationInput[]
    by: NerScalarFieldEnum[] | NerScalarFieldEnum
    having?: nerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NerCountAggregateInputType | true
    _min?: NerMinAggregateInputType
    _max?: NerMaxAggregateInputType
  }

  export type NerGroupByOutputType = {
    uuid: string
    file_name: string
    CASE_NUMBER: string
    COURT: string
    DATE: string | null
    GPE: string
    JUDGE: string
    LAWYER: string
    ORG: string
    OTHER_PERSON: string
    PETITIONER: string
    PRECEDENT: string
    PROVISION: string
    RESPONDENT: string
    STATUTE: string
    WITNESS: string
    global_index_uuid: string
    _count: NerCountAggregateOutputType | null
    _min: NerMinAggregateOutputType | null
    _max: NerMaxAggregateOutputType | null
  }

  type GetNerGroupByPayload<T extends nerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NerGroupByOutputType[P]>
            : GetScalarType<T[P], NerGroupByOutputType[P]>
        }
      >
    >


  export type nerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uuid?: boolean
    file_name?: boolean
    CASE_NUMBER?: boolean
    COURT?: boolean
    DATE?: boolean
    GPE?: boolean
    JUDGE?: boolean
    LAWYER?: boolean
    ORG?: boolean
    OTHER_PERSON?: boolean
    PETITIONER?: boolean
    PRECEDENT?: boolean
    PROVISION?: boolean
    RESPONDENT?: boolean
    STATUTE?: boolean
    WITNESS?: boolean
    global_index_uuid?: boolean
    global_index?: boolean | global_indexDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ner"]>

  export type nerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uuid?: boolean
    file_name?: boolean
    CASE_NUMBER?: boolean
    COURT?: boolean
    DATE?: boolean
    GPE?: boolean
    JUDGE?: boolean
    LAWYER?: boolean
    ORG?: boolean
    OTHER_PERSON?: boolean
    PETITIONER?: boolean
    PRECEDENT?: boolean
    PROVISION?: boolean
    RESPONDENT?: boolean
    STATUTE?: boolean
    WITNESS?: boolean
    global_index_uuid?: boolean
    global_index?: boolean | global_indexDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ner"]>

  export type nerSelectScalar = {
    uuid?: boolean
    file_name?: boolean
    CASE_NUMBER?: boolean
    COURT?: boolean
    DATE?: boolean
    GPE?: boolean
    JUDGE?: boolean
    LAWYER?: boolean
    ORG?: boolean
    OTHER_PERSON?: boolean
    PETITIONER?: boolean
    PRECEDENT?: boolean
    PROVISION?: boolean
    RESPONDENT?: boolean
    STATUTE?: boolean
    WITNESS?: boolean
    global_index_uuid?: boolean
  }

  export type nerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    global_index?: boolean | global_indexDefaultArgs<ExtArgs>
  }
  export type nerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    global_index?: boolean | global_indexDefaultArgs<ExtArgs>
  }

  export type $nerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ner"
    objects: {
      global_index: Prisma.$global_indexPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      uuid: string
      file_name: string
      CASE_NUMBER: string
      COURT: string
      DATE: string | null
      GPE: string
      JUDGE: string
      LAWYER: string
      ORG: string
      OTHER_PERSON: string
      PETITIONER: string
      PRECEDENT: string
      PROVISION: string
      RESPONDENT: string
      STATUTE: string
      WITNESS: string
      global_index_uuid: string
    }, ExtArgs["result"]["ner"]>
    composites: {}
  }

  type nerGetPayload<S extends boolean | null | undefined | nerDefaultArgs> = $Result.GetResult<Prisma.$nerPayload, S>

  type nerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<nerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NerCountAggregateInputType | true
    }

  export interface nerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ner'], meta: { name: 'ner' } }
    /**
     * Find zero or one Ner that matches the filter.
     * @param {nerFindUniqueArgs} args - Arguments to find a Ner
     * @example
     * // Get one Ner
     * const ner = await prisma.ner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends nerFindUniqueArgs>(args: SelectSubset<T, nerFindUniqueArgs<ExtArgs>>): Prisma__nerClient<$Result.GetResult<Prisma.$nerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ner that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {nerFindUniqueOrThrowArgs} args - Arguments to find a Ner
     * @example
     * // Get one Ner
     * const ner = await prisma.ner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends nerFindUniqueOrThrowArgs>(args: SelectSubset<T, nerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__nerClient<$Result.GetResult<Prisma.$nerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nerFindFirstArgs} args - Arguments to find a Ner
     * @example
     * // Get one Ner
     * const ner = await prisma.ner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends nerFindFirstArgs>(args?: SelectSubset<T, nerFindFirstArgs<ExtArgs>>): Prisma__nerClient<$Result.GetResult<Prisma.$nerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nerFindFirstOrThrowArgs} args - Arguments to find a Ner
     * @example
     * // Get one Ner
     * const ner = await prisma.ner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends nerFindFirstOrThrowArgs>(args?: SelectSubset<T, nerFindFirstOrThrowArgs<ExtArgs>>): Prisma__nerClient<$Result.GetResult<Prisma.$nerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Ners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ners
     * const ners = await prisma.ner.findMany()
     * 
     * // Get first 10 Ners
     * const ners = await prisma.ner.findMany({ take: 10 })
     * 
     * // Only select the `uuid`
     * const nerWithUuidOnly = await prisma.ner.findMany({ select: { uuid: true } })
     * 
     */
    findMany<T extends nerFindManyArgs>(args?: SelectSubset<T, nerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$nerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ner.
     * @param {nerCreateArgs} args - Arguments to create a Ner.
     * @example
     * // Create one Ner
     * const Ner = await prisma.ner.create({
     *   data: {
     *     // ... data to create a Ner
     *   }
     * })
     * 
     */
    create<T extends nerCreateArgs>(args: SelectSubset<T, nerCreateArgs<ExtArgs>>): Prisma__nerClient<$Result.GetResult<Prisma.$nerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Ners.
     * @param {nerCreateManyArgs} args - Arguments to create many Ners.
     * @example
     * // Create many Ners
     * const ner = await prisma.ner.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends nerCreateManyArgs>(args?: SelectSubset<T, nerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ners and returns the data saved in the database.
     * @param {nerCreateManyAndReturnArgs} args - Arguments to create many Ners.
     * @example
     * // Create many Ners
     * const ner = await prisma.ner.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ners and only return the `uuid`
     * const nerWithUuidOnly = await prisma.ner.createManyAndReturn({ 
     *   select: { uuid: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends nerCreateManyAndReturnArgs>(args?: SelectSubset<T, nerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$nerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Ner.
     * @param {nerDeleteArgs} args - Arguments to delete one Ner.
     * @example
     * // Delete one Ner
     * const Ner = await prisma.ner.delete({
     *   where: {
     *     // ... filter to delete one Ner
     *   }
     * })
     * 
     */
    delete<T extends nerDeleteArgs>(args: SelectSubset<T, nerDeleteArgs<ExtArgs>>): Prisma__nerClient<$Result.GetResult<Prisma.$nerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ner.
     * @param {nerUpdateArgs} args - Arguments to update one Ner.
     * @example
     * // Update one Ner
     * const ner = await prisma.ner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends nerUpdateArgs>(args: SelectSubset<T, nerUpdateArgs<ExtArgs>>): Prisma__nerClient<$Result.GetResult<Prisma.$nerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Ners.
     * @param {nerDeleteManyArgs} args - Arguments to filter Ners to delete.
     * @example
     * // Delete a few Ners
     * const { count } = await prisma.ner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends nerDeleteManyArgs>(args?: SelectSubset<T, nerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ners
     * const ner = await prisma.ner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends nerUpdateManyArgs>(args: SelectSubset<T, nerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ner.
     * @param {nerUpsertArgs} args - Arguments to update or create a Ner.
     * @example
     * // Update or create a Ner
     * const ner = await prisma.ner.upsert({
     *   create: {
     *     // ... data to create a Ner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ner we want to update
     *   }
     * })
     */
    upsert<T extends nerUpsertArgs>(args: SelectSubset<T, nerUpsertArgs<ExtArgs>>): Prisma__nerClient<$Result.GetResult<Prisma.$nerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Ners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nerCountArgs} args - Arguments to filter Ners to count.
     * @example
     * // Count the number of Ners
     * const count = await prisma.ner.count({
     *   where: {
     *     // ... the filter for the Ners we want to count
     *   }
     * })
    **/
    count<T extends nerCountArgs>(
      args?: Subset<T, nerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NerAggregateArgs>(args: Subset<T, NerAggregateArgs>): Prisma.PrismaPromise<GetNerAggregateType<T>>

    /**
     * Group by Ner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {nerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends nerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: nerGroupByArgs['orderBy'] }
        : { orderBy?: nerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, nerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ner model
   */
  readonly fields: nerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__nerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    global_index<T extends global_indexDefaultArgs<ExtArgs> = {}>(args?: Subset<T, global_indexDefaultArgs<ExtArgs>>): Prisma__global_indexClient<$Result.GetResult<Prisma.$global_indexPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ner model
   */ 
  interface nerFieldRefs {
    readonly uuid: FieldRef<"ner", 'String'>
    readonly file_name: FieldRef<"ner", 'String'>
    readonly CASE_NUMBER: FieldRef<"ner", 'String'>
    readonly COURT: FieldRef<"ner", 'String'>
    readonly DATE: FieldRef<"ner", 'String'>
    readonly GPE: FieldRef<"ner", 'String'>
    readonly JUDGE: FieldRef<"ner", 'String'>
    readonly LAWYER: FieldRef<"ner", 'String'>
    readonly ORG: FieldRef<"ner", 'String'>
    readonly OTHER_PERSON: FieldRef<"ner", 'String'>
    readonly PETITIONER: FieldRef<"ner", 'String'>
    readonly PRECEDENT: FieldRef<"ner", 'String'>
    readonly PROVISION: FieldRef<"ner", 'String'>
    readonly RESPONDENT: FieldRef<"ner", 'String'>
    readonly STATUTE: FieldRef<"ner", 'String'>
    readonly WITNESS: FieldRef<"ner", 'String'>
    readonly global_index_uuid: FieldRef<"ner", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ner findUnique
   */
  export type nerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ner
     */
    select?: nerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nerInclude<ExtArgs> | null
    /**
     * Filter, which ner to fetch.
     */
    where: nerWhereUniqueInput
  }

  /**
   * ner findUniqueOrThrow
   */
  export type nerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ner
     */
    select?: nerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nerInclude<ExtArgs> | null
    /**
     * Filter, which ner to fetch.
     */
    where: nerWhereUniqueInput
  }

  /**
   * ner findFirst
   */
  export type nerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ner
     */
    select?: nerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nerInclude<ExtArgs> | null
    /**
     * Filter, which ner to fetch.
     */
    where?: nerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ners to fetch.
     */
    orderBy?: nerOrderByWithRelationInput | nerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ners.
     */
    cursor?: nerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ners.
     */
    distinct?: NerScalarFieldEnum | NerScalarFieldEnum[]
  }

  /**
   * ner findFirstOrThrow
   */
  export type nerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ner
     */
    select?: nerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nerInclude<ExtArgs> | null
    /**
     * Filter, which ner to fetch.
     */
    where?: nerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ners to fetch.
     */
    orderBy?: nerOrderByWithRelationInput | nerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ners.
     */
    cursor?: nerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ners.
     */
    distinct?: NerScalarFieldEnum | NerScalarFieldEnum[]
  }

  /**
   * ner findMany
   */
  export type nerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ner
     */
    select?: nerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nerInclude<ExtArgs> | null
    /**
     * Filter, which ners to fetch.
     */
    where?: nerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ners to fetch.
     */
    orderBy?: nerOrderByWithRelationInput | nerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ners.
     */
    cursor?: nerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ners.
     */
    skip?: number
    distinct?: NerScalarFieldEnum | NerScalarFieldEnum[]
  }

  /**
   * ner create
   */
  export type nerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ner
     */
    select?: nerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nerInclude<ExtArgs> | null
    /**
     * The data needed to create a ner.
     */
    data: XOR<nerCreateInput, nerUncheckedCreateInput>
  }

  /**
   * ner createMany
   */
  export type nerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ners.
     */
    data: nerCreateManyInput | nerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ner createManyAndReturn
   */
  export type nerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ner
     */
    select?: nerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ners.
     */
    data: nerCreateManyInput | nerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ner update
   */
  export type nerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ner
     */
    select?: nerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nerInclude<ExtArgs> | null
    /**
     * The data needed to update a ner.
     */
    data: XOR<nerUpdateInput, nerUncheckedUpdateInput>
    /**
     * Choose, which ner to update.
     */
    where: nerWhereUniqueInput
  }

  /**
   * ner updateMany
   */
  export type nerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ners.
     */
    data: XOR<nerUpdateManyMutationInput, nerUncheckedUpdateManyInput>
    /**
     * Filter which ners to update
     */
    where?: nerWhereInput
  }

  /**
   * ner upsert
   */
  export type nerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ner
     */
    select?: nerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nerInclude<ExtArgs> | null
    /**
     * The filter to search for the ner to update in case it exists.
     */
    where: nerWhereUniqueInput
    /**
     * In case the ner found by the `where` argument doesn't exist, create a new ner with this data.
     */
    create: XOR<nerCreateInput, nerUncheckedCreateInput>
    /**
     * In case the ner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<nerUpdateInput, nerUncheckedUpdateInput>
  }

  /**
   * ner delete
   */
  export type nerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ner
     */
    select?: nerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nerInclude<ExtArgs> | null
    /**
     * Filter which ner to delete.
     */
    where: nerWhereUniqueInput
  }

  /**
   * ner deleteMany
   */
  export type nerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ners to delete
     */
    where?: nerWhereInput
  }

  /**
   * ner without action
   */
  export type nerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ner
     */
    select?: nerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: nerInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Global_indexScalarFieldEnum: {
    uuid: 'uuid',
    filename: 'filename'
  };

  export type Global_indexScalarFieldEnum = (typeof Global_indexScalarFieldEnum)[keyof typeof Global_indexScalarFieldEnum]


  export const SummaryScalarFieldEnum: {
    id: 'id',
    summary: 'summary',
    global_index_uuid: 'global_index_uuid'
  };

  export type SummaryScalarFieldEnum = (typeof SummaryScalarFieldEnum)[keyof typeof SummaryScalarFieldEnum]


  export const NerScalarFieldEnum: {
    uuid: 'uuid',
    file_name: 'file_name',
    CASE_NUMBER: 'CASE_NUMBER',
    COURT: 'COURT',
    DATE: 'DATE',
    GPE: 'GPE',
    JUDGE: 'JUDGE',
    LAWYER: 'LAWYER',
    ORG: 'ORG',
    OTHER_PERSON: 'OTHER_PERSON',
    PETITIONER: 'PETITIONER',
    PRECEDENT: 'PRECEDENT',
    PROVISION: 'PROVISION',
    RESPONDENT: 'RESPONDENT',
    STATUTE: 'STATUTE',
    WITNESS: 'WITNESS',
    global_index_uuid: 'global_index_uuid'
  };

  export type NerScalarFieldEnum = (typeof NerScalarFieldEnum)[keyof typeof NerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type global_indexWhereInput = {
    AND?: global_indexWhereInput | global_indexWhereInput[]
    OR?: global_indexWhereInput[]
    NOT?: global_indexWhereInput | global_indexWhereInput[]
    uuid?: StringFilter<"global_index"> | string
    filename?: StringFilter<"global_index"> | string
    summary?: XOR<SummaryNullableScalarRelationFilter, summaryWhereInput> | null
    ner?: XOR<NerNullableScalarRelationFilter, nerWhereInput> | null
  }

  export type global_indexOrderByWithRelationInput = {
    uuid?: SortOrder
    filename?: SortOrder
    summary?: summaryOrderByWithRelationInput
    ner?: nerOrderByWithRelationInput
  }

  export type global_indexWhereUniqueInput = Prisma.AtLeast<{
    uuid?: string
    AND?: global_indexWhereInput | global_indexWhereInput[]
    OR?: global_indexWhereInput[]
    NOT?: global_indexWhereInput | global_indexWhereInput[]
    filename?: StringFilter<"global_index"> | string
    summary?: XOR<SummaryNullableScalarRelationFilter, summaryWhereInput> | null
    ner?: XOR<NerNullableScalarRelationFilter, nerWhereInput> | null
  }, "uuid">

  export type global_indexOrderByWithAggregationInput = {
    uuid?: SortOrder
    filename?: SortOrder
    _count?: global_indexCountOrderByAggregateInput
    _max?: global_indexMaxOrderByAggregateInput
    _min?: global_indexMinOrderByAggregateInput
  }

  export type global_indexScalarWhereWithAggregatesInput = {
    AND?: global_indexScalarWhereWithAggregatesInput | global_indexScalarWhereWithAggregatesInput[]
    OR?: global_indexScalarWhereWithAggregatesInput[]
    NOT?: global_indexScalarWhereWithAggregatesInput | global_indexScalarWhereWithAggregatesInput[]
    uuid?: StringWithAggregatesFilter<"global_index"> | string
    filename?: StringWithAggregatesFilter<"global_index"> | string
  }

  export type summaryWhereInput = {
    AND?: summaryWhereInput | summaryWhereInput[]
    OR?: summaryWhereInput[]
    NOT?: summaryWhereInput | summaryWhereInput[]
    id?: IntFilter<"summary"> | number
    summary?: StringFilter<"summary"> | string
    global_index_uuid?: StringFilter<"summary"> | string
    global_index?: XOR<Global_indexScalarRelationFilter, global_indexWhereInput>
  }

  export type summaryOrderByWithRelationInput = {
    id?: SortOrder
    summary?: SortOrder
    global_index_uuid?: SortOrder
    global_index?: global_indexOrderByWithRelationInput
  }

  export type summaryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    global_index_uuid?: string
    AND?: summaryWhereInput | summaryWhereInput[]
    OR?: summaryWhereInput[]
    NOT?: summaryWhereInput | summaryWhereInput[]
    summary?: StringFilter<"summary"> | string
    global_index?: XOR<Global_indexScalarRelationFilter, global_indexWhereInput>
  }, "id" | "global_index_uuid">

  export type summaryOrderByWithAggregationInput = {
    id?: SortOrder
    summary?: SortOrder
    global_index_uuid?: SortOrder
    _count?: summaryCountOrderByAggregateInput
    _avg?: summaryAvgOrderByAggregateInput
    _max?: summaryMaxOrderByAggregateInput
    _min?: summaryMinOrderByAggregateInput
    _sum?: summarySumOrderByAggregateInput
  }

  export type summaryScalarWhereWithAggregatesInput = {
    AND?: summaryScalarWhereWithAggregatesInput | summaryScalarWhereWithAggregatesInput[]
    OR?: summaryScalarWhereWithAggregatesInput[]
    NOT?: summaryScalarWhereWithAggregatesInput | summaryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"summary"> | number
    summary?: StringWithAggregatesFilter<"summary"> | string
    global_index_uuid?: StringWithAggregatesFilter<"summary"> | string
  }

  export type nerWhereInput = {
    AND?: nerWhereInput | nerWhereInput[]
    OR?: nerWhereInput[]
    NOT?: nerWhereInput | nerWhereInput[]
    uuid?: StringFilter<"ner"> | string
    file_name?: StringFilter<"ner"> | string
    CASE_NUMBER?: StringFilter<"ner"> | string
    COURT?: StringFilter<"ner"> | string
    DATE?: StringNullableFilter<"ner"> | string | null
    GPE?: StringFilter<"ner"> | string
    JUDGE?: StringFilter<"ner"> | string
    LAWYER?: StringFilter<"ner"> | string
    ORG?: StringFilter<"ner"> | string
    OTHER_PERSON?: StringFilter<"ner"> | string
    PETITIONER?: StringFilter<"ner"> | string
    PRECEDENT?: StringFilter<"ner"> | string
    PROVISION?: StringFilter<"ner"> | string
    RESPONDENT?: StringFilter<"ner"> | string
    STATUTE?: StringFilter<"ner"> | string
    WITNESS?: StringFilter<"ner"> | string
    global_index_uuid?: StringFilter<"ner"> | string
    global_index?: XOR<Global_indexScalarRelationFilter, global_indexWhereInput>
  }

  export type nerOrderByWithRelationInput = {
    uuid?: SortOrder
    file_name?: SortOrder
    CASE_NUMBER?: SortOrder
    COURT?: SortOrder
    DATE?: SortOrderInput | SortOrder
    GPE?: SortOrder
    JUDGE?: SortOrder
    LAWYER?: SortOrder
    ORG?: SortOrder
    OTHER_PERSON?: SortOrder
    PETITIONER?: SortOrder
    PRECEDENT?: SortOrder
    PROVISION?: SortOrder
    RESPONDENT?: SortOrder
    STATUTE?: SortOrder
    WITNESS?: SortOrder
    global_index_uuid?: SortOrder
    global_index?: global_indexOrderByWithRelationInput
  }

  export type nerWhereUniqueInput = Prisma.AtLeast<{
    uuid?: string
    global_index_uuid?: string
    AND?: nerWhereInput | nerWhereInput[]
    OR?: nerWhereInput[]
    NOT?: nerWhereInput | nerWhereInput[]
    file_name?: StringFilter<"ner"> | string
    CASE_NUMBER?: StringFilter<"ner"> | string
    COURT?: StringFilter<"ner"> | string
    DATE?: StringNullableFilter<"ner"> | string | null
    GPE?: StringFilter<"ner"> | string
    JUDGE?: StringFilter<"ner"> | string
    LAWYER?: StringFilter<"ner"> | string
    ORG?: StringFilter<"ner"> | string
    OTHER_PERSON?: StringFilter<"ner"> | string
    PETITIONER?: StringFilter<"ner"> | string
    PRECEDENT?: StringFilter<"ner"> | string
    PROVISION?: StringFilter<"ner"> | string
    RESPONDENT?: StringFilter<"ner"> | string
    STATUTE?: StringFilter<"ner"> | string
    WITNESS?: StringFilter<"ner"> | string
    global_index?: XOR<Global_indexScalarRelationFilter, global_indexWhereInput>
  }, "uuid" | "global_index_uuid">

  export type nerOrderByWithAggregationInput = {
    uuid?: SortOrder
    file_name?: SortOrder
    CASE_NUMBER?: SortOrder
    COURT?: SortOrder
    DATE?: SortOrderInput | SortOrder
    GPE?: SortOrder
    JUDGE?: SortOrder
    LAWYER?: SortOrder
    ORG?: SortOrder
    OTHER_PERSON?: SortOrder
    PETITIONER?: SortOrder
    PRECEDENT?: SortOrder
    PROVISION?: SortOrder
    RESPONDENT?: SortOrder
    STATUTE?: SortOrder
    WITNESS?: SortOrder
    global_index_uuid?: SortOrder
    _count?: nerCountOrderByAggregateInput
    _max?: nerMaxOrderByAggregateInput
    _min?: nerMinOrderByAggregateInput
  }

  export type nerScalarWhereWithAggregatesInput = {
    AND?: nerScalarWhereWithAggregatesInput | nerScalarWhereWithAggregatesInput[]
    OR?: nerScalarWhereWithAggregatesInput[]
    NOT?: nerScalarWhereWithAggregatesInput | nerScalarWhereWithAggregatesInput[]
    uuid?: StringWithAggregatesFilter<"ner"> | string
    file_name?: StringWithAggregatesFilter<"ner"> | string
    CASE_NUMBER?: StringWithAggregatesFilter<"ner"> | string
    COURT?: StringWithAggregatesFilter<"ner"> | string
    DATE?: StringNullableWithAggregatesFilter<"ner"> | string | null
    GPE?: StringWithAggregatesFilter<"ner"> | string
    JUDGE?: StringWithAggregatesFilter<"ner"> | string
    LAWYER?: StringWithAggregatesFilter<"ner"> | string
    ORG?: StringWithAggregatesFilter<"ner"> | string
    OTHER_PERSON?: StringWithAggregatesFilter<"ner"> | string
    PETITIONER?: StringWithAggregatesFilter<"ner"> | string
    PRECEDENT?: StringWithAggregatesFilter<"ner"> | string
    PROVISION?: StringWithAggregatesFilter<"ner"> | string
    RESPONDENT?: StringWithAggregatesFilter<"ner"> | string
    STATUTE?: StringWithAggregatesFilter<"ner"> | string
    WITNESS?: StringWithAggregatesFilter<"ner"> | string
    global_index_uuid?: StringWithAggregatesFilter<"ner"> | string
  }

  export type global_indexCreateInput = {
    uuid?: string
    filename: string
    summary?: summaryCreateNestedOneWithoutGlobal_indexInput
    ner?: nerCreateNestedOneWithoutGlobal_indexInput
  }

  export type global_indexUncheckedCreateInput = {
    uuid?: string
    filename: string
    summary?: summaryUncheckedCreateNestedOneWithoutGlobal_indexInput
    ner?: nerUncheckedCreateNestedOneWithoutGlobal_indexInput
  }

  export type global_indexUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    summary?: summaryUpdateOneWithoutGlobal_indexNestedInput
    ner?: nerUpdateOneWithoutGlobal_indexNestedInput
  }

  export type global_indexUncheckedUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    summary?: summaryUncheckedUpdateOneWithoutGlobal_indexNestedInput
    ner?: nerUncheckedUpdateOneWithoutGlobal_indexNestedInput
  }

  export type global_indexCreateManyInput = {
    uuid?: string
    filename: string
  }

  export type global_indexUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
  }

  export type global_indexUncheckedUpdateManyInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
  }

  export type summaryCreateInput = {
    summary: string
    global_index: global_indexCreateNestedOneWithoutSummaryInput
  }

  export type summaryUncheckedCreateInput = {
    id?: number
    summary: string
    global_index_uuid: string
  }

  export type summaryUpdateInput = {
    summary?: StringFieldUpdateOperationsInput | string
    global_index?: global_indexUpdateOneRequiredWithoutSummaryNestedInput
  }

  export type summaryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
    global_index_uuid?: StringFieldUpdateOperationsInput | string
  }

  export type summaryCreateManyInput = {
    id?: number
    summary: string
    global_index_uuid: string
  }

  export type summaryUpdateManyMutationInput = {
    summary?: StringFieldUpdateOperationsInput | string
  }

  export type summaryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
    global_index_uuid?: StringFieldUpdateOperationsInput | string
  }

  export type nerCreateInput = {
    uuid?: string
    file_name: string
    CASE_NUMBER: string
    COURT: string
    DATE?: string | null
    GPE: string
    JUDGE: string
    LAWYER: string
    ORG: string
    OTHER_PERSON: string
    PETITIONER: string
    PRECEDENT: string
    PROVISION: string
    RESPONDENT: string
    STATUTE: string
    WITNESS: string
    global_index: global_indexCreateNestedOneWithoutNerInput
  }

  export type nerUncheckedCreateInput = {
    uuid?: string
    file_name: string
    CASE_NUMBER: string
    COURT: string
    DATE?: string | null
    GPE: string
    JUDGE: string
    LAWYER: string
    ORG: string
    OTHER_PERSON: string
    PETITIONER: string
    PRECEDENT: string
    PROVISION: string
    RESPONDENT: string
    STATUTE: string
    WITNESS: string
    global_index_uuid: string
  }

  export type nerUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    file_name?: StringFieldUpdateOperationsInput | string
    CASE_NUMBER?: StringFieldUpdateOperationsInput | string
    COURT?: StringFieldUpdateOperationsInput | string
    DATE?: NullableStringFieldUpdateOperationsInput | string | null
    GPE?: StringFieldUpdateOperationsInput | string
    JUDGE?: StringFieldUpdateOperationsInput | string
    LAWYER?: StringFieldUpdateOperationsInput | string
    ORG?: StringFieldUpdateOperationsInput | string
    OTHER_PERSON?: StringFieldUpdateOperationsInput | string
    PETITIONER?: StringFieldUpdateOperationsInput | string
    PRECEDENT?: StringFieldUpdateOperationsInput | string
    PROVISION?: StringFieldUpdateOperationsInput | string
    RESPONDENT?: StringFieldUpdateOperationsInput | string
    STATUTE?: StringFieldUpdateOperationsInput | string
    WITNESS?: StringFieldUpdateOperationsInput | string
    global_index?: global_indexUpdateOneRequiredWithoutNerNestedInput
  }

  export type nerUncheckedUpdateInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    file_name?: StringFieldUpdateOperationsInput | string
    CASE_NUMBER?: StringFieldUpdateOperationsInput | string
    COURT?: StringFieldUpdateOperationsInput | string
    DATE?: NullableStringFieldUpdateOperationsInput | string | null
    GPE?: StringFieldUpdateOperationsInput | string
    JUDGE?: StringFieldUpdateOperationsInput | string
    LAWYER?: StringFieldUpdateOperationsInput | string
    ORG?: StringFieldUpdateOperationsInput | string
    OTHER_PERSON?: StringFieldUpdateOperationsInput | string
    PETITIONER?: StringFieldUpdateOperationsInput | string
    PRECEDENT?: StringFieldUpdateOperationsInput | string
    PROVISION?: StringFieldUpdateOperationsInput | string
    RESPONDENT?: StringFieldUpdateOperationsInput | string
    STATUTE?: StringFieldUpdateOperationsInput | string
    WITNESS?: StringFieldUpdateOperationsInput | string
    global_index_uuid?: StringFieldUpdateOperationsInput | string
  }

  export type nerCreateManyInput = {
    uuid?: string
    file_name: string
    CASE_NUMBER: string
    COURT: string
    DATE?: string | null
    GPE: string
    JUDGE: string
    LAWYER: string
    ORG: string
    OTHER_PERSON: string
    PETITIONER: string
    PRECEDENT: string
    PROVISION: string
    RESPONDENT: string
    STATUTE: string
    WITNESS: string
    global_index_uuid: string
  }

  export type nerUpdateManyMutationInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    file_name?: StringFieldUpdateOperationsInput | string
    CASE_NUMBER?: StringFieldUpdateOperationsInput | string
    COURT?: StringFieldUpdateOperationsInput | string
    DATE?: NullableStringFieldUpdateOperationsInput | string | null
    GPE?: StringFieldUpdateOperationsInput | string
    JUDGE?: StringFieldUpdateOperationsInput | string
    LAWYER?: StringFieldUpdateOperationsInput | string
    ORG?: StringFieldUpdateOperationsInput | string
    OTHER_PERSON?: StringFieldUpdateOperationsInput | string
    PETITIONER?: StringFieldUpdateOperationsInput | string
    PRECEDENT?: StringFieldUpdateOperationsInput | string
    PROVISION?: StringFieldUpdateOperationsInput | string
    RESPONDENT?: StringFieldUpdateOperationsInput | string
    STATUTE?: StringFieldUpdateOperationsInput | string
    WITNESS?: StringFieldUpdateOperationsInput | string
  }

  export type nerUncheckedUpdateManyInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    file_name?: StringFieldUpdateOperationsInput | string
    CASE_NUMBER?: StringFieldUpdateOperationsInput | string
    COURT?: StringFieldUpdateOperationsInput | string
    DATE?: NullableStringFieldUpdateOperationsInput | string | null
    GPE?: StringFieldUpdateOperationsInput | string
    JUDGE?: StringFieldUpdateOperationsInput | string
    LAWYER?: StringFieldUpdateOperationsInput | string
    ORG?: StringFieldUpdateOperationsInput | string
    OTHER_PERSON?: StringFieldUpdateOperationsInput | string
    PETITIONER?: StringFieldUpdateOperationsInput | string
    PRECEDENT?: StringFieldUpdateOperationsInput | string
    PROVISION?: StringFieldUpdateOperationsInput | string
    RESPONDENT?: StringFieldUpdateOperationsInput | string
    STATUTE?: StringFieldUpdateOperationsInput | string
    WITNESS?: StringFieldUpdateOperationsInput | string
    global_index_uuid?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type SummaryNullableScalarRelationFilter = {
    is?: summaryWhereInput | null
    isNot?: summaryWhereInput | null
  }

  export type NerNullableScalarRelationFilter = {
    is?: nerWhereInput | null
    isNot?: nerWhereInput | null
  }

  export type global_indexCountOrderByAggregateInput = {
    uuid?: SortOrder
    filename?: SortOrder
  }

  export type global_indexMaxOrderByAggregateInput = {
    uuid?: SortOrder
    filename?: SortOrder
  }

  export type global_indexMinOrderByAggregateInput = {
    uuid?: SortOrder
    filename?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type Global_indexScalarRelationFilter = {
    is?: global_indexWhereInput
    isNot?: global_indexWhereInput
  }

  export type summaryCountOrderByAggregateInput = {
    id?: SortOrder
    summary?: SortOrder
    global_index_uuid?: SortOrder
  }

  export type summaryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type summaryMaxOrderByAggregateInput = {
    id?: SortOrder
    summary?: SortOrder
    global_index_uuid?: SortOrder
  }

  export type summaryMinOrderByAggregateInput = {
    id?: SortOrder
    summary?: SortOrder
    global_index_uuid?: SortOrder
  }

  export type summarySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type nerCountOrderByAggregateInput = {
    uuid?: SortOrder
    file_name?: SortOrder
    CASE_NUMBER?: SortOrder
    COURT?: SortOrder
    DATE?: SortOrder
    GPE?: SortOrder
    JUDGE?: SortOrder
    LAWYER?: SortOrder
    ORG?: SortOrder
    OTHER_PERSON?: SortOrder
    PETITIONER?: SortOrder
    PRECEDENT?: SortOrder
    PROVISION?: SortOrder
    RESPONDENT?: SortOrder
    STATUTE?: SortOrder
    WITNESS?: SortOrder
    global_index_uuid?: SortOrder
  }

  export type nerMaxOrderByAggregateInput = {
    uuid?: SortOrder
    file_name?: SortOrder
    CASE_NUMBER?: SortOrder
    COURT?: SortOrder
    DATE?: SortOrder
    GPE?: SortOrder
    JUDGE?: SortOrder
    LAWYER?: SortOrder
    ORG?: SortOrder
    OTHER_PERSON?: SortOrder
    PETITIONER?: SortOrder
    PRECEDENT?: SortOrder
    PROVISION?: SortOrder
    RESPONDENT?: SortOrder
    STATUTE?: SortOrder
    WITNESS?: SortOrder
    global_index_uuid?: SortOrder
  }

  export type nerMinOrderByAggregateInput = {
    uuid?: SortOrder
    file_name?: SortOrder
    CASE_NUMBER?: SortOrder
    COURT?: SortOrder
    DATE?: SortOrder
    GPE?: SortOrder
    JUDGE?: SortOrder
    LAWYER?: SortOrder
    ORG?: SortOrder
    OTHER_PERSON?: SortOrder
    PETITIONER?: SortOrder
    PRECEDENT?: SortOrder
    PROVISION?: SortOrder
    RESPONDENT?: SortOrder
    STATUTE?: SortOrder
    WITNESS?: SortOrder
    global_index_uuid?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type summaryCreateNestedOneWithoutGlobal_indexInput = {
    create?: XOR<summaryCreateWithoutGlobal_indexInput, summaryUncheckedCreateWithoutGlobal_indexInput>
    connectOrCreate?: summaryCreateOrConnectWithoutGlobal_indexInput
    connect?: summaryWhereUniqueInput
  }

  export type nerCreateNestedOneWithoutGlobal_indexInput = {
    create?: XOR<nerCreateWithoutGlobal_indexInput, nerUncheckedCreateWithoutGlobal_indexInput>
    connectOrCreate?: nerCreateOrConnectWithoutGlobal_indexInput
    connect?: nerWhereUniqueInput
  }

  export type summaryUncheckedCreateNestedOneWithoutGlobal_indexInput = {
    create?: XOR<summaryCreateWithoutGlobal_indexInput, summaryUncheckedCreateWithoutGlobal_indexInput>
    connectOrCreate?: summaryCreateOrConnectWithoutGlobal_indexInput
    connect?: summaryWhereUniqueInput
  }

  export type nerUncheckedCreateNestedOneWithoutGlobal_indexInput = {
    create?: XOR<nerCreateWithoutGlobal_indexInput, nerUncheckedCreateWithoutGlobal_indexInput>
    connectOrCreate?: nerCreateOrConnectWithoutGlobal_indexInput
    connect?: nerWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type summaryUpdateOneWithoutGlobal_indexNestedInput = {
    create?: XOR<summaryCreateWithoutGlobal_indexInput, summaryUncheckedCreateWithoutGlobal_indexInput>
    connectOrCreate?: summaryCreateOrConnectWithoutGlobal_indexInput
    upsert?: summaryUpsertWithoutGlobal_indexInput
    disconnect?: summaryWhereInput | boolean
    delete?: summaryWhereInput | boolean
    connect?: summaryWhereUniqueInput
    update?: XOR<XOR<summaryUpdateToOneWithWhereWithoutGlobal_indexInput, summaryUpdateWithoutGlobal_indexInput>, summaryUncheckedUpdateWithoutGlobal_indexInput>
  }

  export type nerUpdateOneWithoutGlobal_indexNestedInput = {
    create?: XOR<nerCreateWithoutGlobal_indexInput, nerUncheckedCreateWithoutGlobal_indexInput>
    connectOrCreate?: nerCreateOrConnectWithoutGlobal_indexInput
    upsert?: nerUpsertWithoutGlobal_indexInput
    disconnect?: nerWhereInput | boolean
    delete?: nerWhereInput | boolean
    connect?: nerWhereUniqueInput
    update?: XOR<XOR<nerUpdateToOneWithWhereWithoutGlobal_indexInput, nerUpdateWithoutGlobal_indexInput>, nerUncheckedUpdateWithoutGlobal_indexInput>
  }

  export type summaryUncheckedUpdateOneWithoutGlobal_indexNestedInput = {
    create?: XOR<summaryCreateWithoutGlobal_indexInput, summaryUncheckedCreateWithoutGlobal_indexInput>
    connectOrCreate?: summaryCreateOrConnectWithoutGlobal_indexInput
    upsert?: summaryUpsertWithoutGlobal_indexInput
    disconnect?: summaryWhereInput | boolean
    delete?: summaryWhereInput | boolean
    connect?: summaryWhereUniqueInput
    update?: XOR<XOR<summaryUpdateToOneWithWhereWithoutGlobal_indexInput, summaryUpdateWithoutGlobal_indexInput>, summaryUncheckedUpdateWithoutGlobal_indexInput>
  }

  export type nerUncheckedUpdateOneWithoutGlobal_indexNestedInput = {
    create?: XOR<nerCreateWithoutGlobal_indexInput, nerUncheckedCreateWithoutGlobal_indexInput>
    connectOrCreate?: nerCreateOrConnectWithoutGlobal_indexInput
    upsert?: nerUpsertWithoutGlobal_indexInput
    disconnect?: nerWhereInput | boolean
    delete?: nerWhereInput | boolean
    connect?: nerWhereUniqueInput
    update?: XOR<XOR<nerUpdateToOneWithWhereWithoutGlobal_indexInput, nerUpdateWithoutGlobal_indexInput>, nerUncheckedUpdateWithoutGlobal_indexInput>
  }

  export type global_indexCreateNestedOneWithoutSummaryInput = {
    create?: XOR<global_indexCreateWithoutSummaryInput, global_indexUncheckedCreateWithoutSummaryInput>
    connectOrCreate?: global_indexCreateOrConnectWithoutSummaryInput
    connect?: global_indexWhereUniqueInput
  }

  export type global_indexUpdateOneRequiredWithoutSummaryNestedInput = {
    create?: XOR<global_indexCreateWithoutSummaryInput, global_indexUncheckedCreateWithoutSummaryInput>
    connectOrCreate?: global_indexCreateOrConnectWithoutSummaryInput
    upsert?: global_indexUpsertWithoutSummaryInput
    connect?: global_indexWhereUniqueInput
    update?: XOR<XOR<global_indexUpdateToOneWithWhereWithoutSummaryInput, global_indexUpdateWithoutSummaryInput>, global_indexUncheckedUpdateWithoutSummaryInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type global_indexCreateNestedOneWithoutNerInput = {
    create?: XOR<global_indexCreateWithoutNerInput, global_indexUncheckedCreateWithoutNerInput>
    connectOrCreate?: global_indexCreateOrConnectWithoutNerInput
    connect?: global_indexWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type global_indexUpdateOneRequiredWithoutNerNestedInput = {
    create?: XOR<global_indexCreateWithoutNerInput, global_indexUncheckedCreateWithoutNerInput>
    connectOrCreate?: global_indexCreateOrConnectWithoutNerInput
    upsert?: global_indexUpsertWithoutNerInput
    connect?: global_indexWhereUniqueInput
    update?: XOR<XOR<global_indexUpdateToOneWithWhereWithoutNerInput, global_indexUpdateWithoutNerInput>, global_indexUncheckedUpdateWithoutNerInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type summaryCreateWithoutGlobal_indexInput = {
    summary: string
  }

  export type summaryUncheckedCreateWithoutGlobal_indexInput = {
    id?: number
    summary: string
  }

  export type summaryCreateOrConnectWithoutGlobal_indexInput = {
    where: summaryWhereUniqueInput
    create: XOR<summaryCreateWithoutGlobal_indexInput, summaryUncheckedCreateWithoutGlobal_indexInput>
  }

  export type nerCreateWithoutGlobal_indexInput = {
    uuid?: string
    file_name: string
    CASE_NUMBER: string
    COURT: string
    DATE?: string | null
    GPE: string
    JUDGE: string
    LAWYER: string
    ORG: string
    OTHER_PERSON: string
    PETITIONER: string
    PRECEDENT: string
    PROVISION: string
    RESPONDENT: string
    STATUTE: string
    WITNESS: string
  }

  export type nerUncheckedCreateWithoutGlobal_indexInput = {
    uuid?: string
    file_name: string
    CASE_NUMBER: string
    COURT: string
    DATE?: string | null
    GPE: string
    JUDGE: string
    LAWYER: string
    ORG: string
    OTHER_PERSON: string
    PETITIONER: string
    PRECEDENT: string
    PROVISION: string
    RESPONDENT: string
    STATUTE: string
    WITNESS: string
  }

  export type nerCreateOrConnectWithoutGlobal_indexInput = {
    where: nerWhereUniqueInput
    create: XOR<nerCreateWithoutGlobal_indexInput, nerUncheckedCreateWithoutGlobal_indexInput>
  }

  export type summaryUpsertWithoutGlobal_indexInput = {
    update: XOR<summaryUpdateWithoutGlobal_indexInput, summaryUncheckedUpdateWithoutGlobal_indexInput>
    create: XOR<summaryCreateWithoutGlobal_indexInput, summaryUncheckedCreateWithoutGlobal_indexInput>
    where?: summaryWhereInput
  }

  export type summaryUpdateToOneWithWhereWithoutGlobal_indexInput = {
    where?: summaryWhereInput
    data: XOR<summaryUpdateWithoutGlobal_indexInput, summaryUncheckedUpdateWithoutGlobal_indexInput>
  }

  export type summaryUpdateWithoutGlobal_indexInput = {
    summary?: StringFieldUpdateOperationsInput | string
  }

  export type summaryUncheckedUpdateWithoutGlobal_indexInput = {
    id?: IntFieldUpdateOperationsInput | number
    summary?: StringFieldUpdateOperationsInput | string
  }

  export type nerUpsertWithoutGlobal_indexInput = {
    update: XOR<nerUpdateWithoutGlobal_indexInput, nerUncheckedUpdateWithoutGlobal_indexInput>
    create: XOR<nerCreateWithoutGlobal_indexInput, nerUncheckedCreateWithoutGlobal_indexInput>
    where?: nerWhereInput
  }

  export type nerUpdateToOneWithWhereWithoutGlobal_indexInput = {
    where?: nerWhereInput
    data: XOR<nerUpdateWithoutGlobal_indexInput, nerUncheckedUpdateWithoutGlobal_indexInput>
  }

  export type nerUpdateWithoutGlobal_indexInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    file_name?: StringFieldUpdateOperationsInput | string
    CASE_NUMBER?: StringFieldUpdateOperationsInput | string
    COURT?: StringFieldUpdateOperationsInput | string
    DATE?: NullableStringFieldUpdateOperationsInput | string | null
    GPE?: StringFieldUpdateOperationsInput | string
    JUDGE?: StringFieldUpdateOperationsInput | string
    LAWYER?: StringFieldUpdateOperationsInput | string
    ORG?: StringFieldUpdateOperationsInput | string
    OTHER_PERSON?: StringFieldUpdateOperationsInput | string
    PETITIONER?: StringFieldUpdateOperationsInput | string
    PRECEDENT?: StringFieldUpdateOperationsInput | string
    PROVISION?: StringFieldUpdateOperationsInput | string
    RESPONDENT?: StringFieldUpdateOperationsInput | string
    STATUTE?: StringFieldUpdateOperationsInput | string
    WITNESS?: StringFieldUpdateOperationsInput | string
  }

  export type nerUncheckedUpdateWithoutGlobal_indexInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    file_name?: StringFieldUpdateOperationsInput | string
    CASE_NUMBER?: StringFieldUpdateOperationsInput | string
    COURT?: StringFieldUpdateOperationsInput | string
    DATE?: NullableStringFieldUpdateOperationsInput | string | null
    GPE?: StringFieldUpdateOperationsInput | string
    JUDGE?: StringFieldUpdateOperationsInput | string
    LAWYER?: StringFieldUpdateOperationsInput | string
    ORG?: StringFieldUpdateOperationsInput | string
    OTHER_PERSON?: StringFieldUpdateOperationsInput | string
    PETITIONER?: StringFieldUpdateOperationsInput | string
    PRECEDENT?: StringFieldUpdateOperationsInput | string
    PROVISION?: StringFieldUpdateOperationsInput | string
    RESPONDENT?: StringFieldUpdateOperationsInput | string
    STATUTE?: StringFieldUpdateOperationsInput | string
    WITNESS?: StringFieldUpdateOperationsInput | string
  }

  export type global_indexCreateWithoutSummaryInput = {
    uuid?: string
    filename: string
    ner?: nerCreateNestedOneWithoutGlobal_indexInput
  }

  export type global_indexUncheckedCreateWithoutSummaryInput = {
    uuid?: string
    filename: string
    ner?: nerUncheckedCreateNestedOneWithoutGlobal_indexInput
  }

  export type global_indexCreateOrConnectWithoutSummaryInput = {
    where: global_indexWhereUniqueInput
    create: XOR<global_indexCreateWithoutSummaryInput, global_indexUncheckedCreateWithoutSummaryInput>
  }

  export type global_indexUpsertWithoutSummaryInput = {
    update: XOR<global_indexUpdateWithoutSummaryInput, global_indexUncheckedUpdateWithoutSummaryInput>
    create: XOR<global_indexCreateWithoutSummaryInput, global_indexUncheckedCreateWithoutSummaryInput>
    where?: global_indexWhereInput
  }

  export type global_indexUpdateToOneWithWhereWithoutSummaryInput = {
    where?: global_indexWhereInput
    data: XOR<global_indexUpdateWithoutSummaryInput, global_indexUncheckedUpdateWithoutSummaryInput>
  }

  export type global_indexUpdateWithoutSummaryInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    ner?: nerUpdateOneWithoutGlobal_indexNestedInput
  }

  export type global_indexUncheckedUpdateWithoutSummaryInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    ner?: nerUncheckedUpdateOneWithoutGlobal_indexNestedInput
  }

  export type global_indexCreateWithoutNerInput = {
    uuid?: string
    filename: string
    summary?: summaryCreateNestedOneWithoutGlobal_indexInput
  }

  export type global_indexUncheckedCreateWithoutNerInput = {
    uuid?: string
    filename: string
    summary?: summaryUncheckedCreateNestedOneWithoutGlobal_indexInput
  }

  export type global_indexCreateOrConnectWithoutNerInput = {
    where: global_indexWhereUniqueInput
    create: XOR<global_indexCreateWithoutNerInput, global_indexUncheckedCreateWithoutNerInput>
  }

  export type global_indexUpsertWithoutNerInput = {
    update: XOR<global_indexUpdateWithoutNerInput, global_indexUncheckedUpdateWithoutNerInput>
    create: XOR<global_indexCreateWithoutNerInput, global_indexUncheckedCreateWithoutNerInput>
    where?: global_indexWhereInput
  }

  export type global_indexUpdateToOneWithWhereWithoutNerInput = {
    where?: global_indexWhereInput
    data: XOR<global_indexUpdateWithoutNerInput, global_indexUncheckedUpdateWithoutNerInput>
  }

  export type global_indexUpdateWithoutNerInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    summary?: summaryUpdateOneWithoutGlobal_indexNestedInput
  }

  export type global_indexUncheckedUpdateWithoutNerInput = {
    uuid?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    summary?: summaryUncheckedUpdateOneWithoutGlobal_indexNestedInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}